---------------------------------------------> test [39]
|  CMD: ->export TESTVAR
| env | grep TESTVAR<-
|--------------------------------
|  EXPECTED (BASH OUTP)  |  exit status: (1)
|
|--- STDOUT:
| -><-
|
|--- STDERR:
| -><-
|
|--- COMPARED STR:
| -><-
|--------------------------------
|--->FOUND (MINISHELL OUTP)  |  exit status: (134)
|
| AddressSanitizer:DEADLYSIGNAL
| =================================================================
| ==29730==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x000109e7d125 bp 0x7ffee5dc4dd0 sp 0x7ffee5dc4dd0 T0)
| ==29730==The signal is caused by a READ memory access.
| ==29730==Hint: address points to the zero page.
|     #0 0x109e7d125 in ft_strlen+0x35 (minishell:x86_64+0x100043125)
|     #1 0x109e7d44b in ft_substr+0x3b (minishell:x86_64+0x10004344b)
|     #2 0x109e3fb06 in ft_export builtins.c:215
|     #3 0x109e3ed7c in ft_exec_builtin builtins.c:30
|     #4 0x109e42873 in parse_one_cmd parser.c:59
|     #5 0x109e41daa in parser parser.c:147
|     #6 0x109e3e210 in input_loop mminishell.c:149
|     #7 0x109e3e403 in main mminishell.c:165
|     #8 0x7fff6f3d9cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
| 
| ==29730==Register values:
| rax = 0x0000000000000001  rbx = 0x00007ffee5dc5340  rcx = 0x0000000000000000  rdx = 0x0000000000000000  
| rdi = 0x0000000000000001  rsi = 0x0000000000000000  rbp = 0x00007ffee5dc4dd0  rsp = 0x00007ffee5dc4dd0  
|  r8 = 0x0000200000000000   r9 = 0x0000000000000000  r10 = 0xffffffffffffffff  r11 = 0x00000fffffffffff  
| r12 = 0x0000000000000000  r13 = 0x0000000000000000  r14 = 0x0000000000000000  r15 = 0x0000000000000000  
| AddressSanitizer can not provide additional info.
| SUMMARY: AddressSanitizer: SEGV (minishell:x86_64+0x100043125) in ft_strlen+0x35
| ==29730==ABORTING
| ./mpanic.sh: line 164: 29730 Abort trap: 6           ./minishell
|
---------------------------------------------<

---------------------------------------------> test [40]
|  CMD: ->export TESTVAR=
| env | grep TESTVAR<-
|--------------------------------
|  EXPECTED (BASH OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=$<-
|
|--- STDERR:
| -><-
|
|--- COMPARED STR:
| -><-
|--------------------------------
|--->FOUND (MINISHELL OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=$<-
|
|--- STDERR:
| ->AddressSanitizer:DEADLYSIGNAL$
| =================================================================$
| ==29761==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0001067d459f bp 0x7ffee942ff00 sp 0x7ffee942fee0 T0)$
| ==29761==The signal is caused by a READ memory access.$
| ==29761==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.$
|     #0 0x1067d459f in ft_env builtins.c:150$
|     #1 0x1067d3c08 in ft_exec_builtin builtins.c:28$
|     #2 0x1067d6a4b in executor executor.c:178$
|     #3 0x1067d7ea5 in parse_child_cmd parser.c:86$
|     #4 0x1067d6e2e in parser parser.c:151$
|     #5 0x1067d3210 in input_loop mminishell.c:149$
|     #6 0x1067d3403 in main mminishell.c:165$
|     #7 0x7fff6f3d9cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)$
| $
| ==29761==Register values:$
| rax = 0xbebebebebebebebe  rbx = 0x00007ffee9430340  rcx = 0x17d7d7d7d7d7d7d7  rdx = 0x0000100000000000  $
| rdi = 0x00000001068164fe  rsi = 0x0000000000000006  rbp = 0x00007ffee942ff00  rsp = 0x00007ffee942fee0  $
|  r8 = 0x0000000000000400   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x0000000000000246  $
| r12 = 0x0000000000000000  r13 = 0x0000000000000000  r14 = 0x0000000000000000  r15 = 0x0000000000000000  $
| AddressSanitizer can not provide additional info.$
| SUMMARY: AddressSanitizer: SEGV builtins.c:150 in ft_env$
| ==29761==ABORTING$<-
|
---------------------------------------------<

---------------------------------------------> test [41]
|  CMD: ->export TESTVAR=""
| env | grep TESTVAR<-
|--------------------------------
|  EXPECTED (BASH OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=$<-
|
|--- STDERR:
| -><-
|
|--- COMPARED STR:
| -><-
|--------------------------------
|--->FOUND (MINISHELL OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=$<-
|
|--- STDERR:
| ->AddressSanitizer:DEADLYSIGNAL$
| =================================================================$
| ==29812==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x000104c5359f bp 0x7ffeeafb0f00 sp 0x7ffeeafb0ee0 T0)$
| ==29812==The signal is caused by a READ memory access.$
| ==29812==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.$
|     #0 0x104c5359f in ft_env builtins.c:150$
|     #1 0x104c52c08 in ft_exec_builtin builtins.c:28$
|     #2 0x104c55a4b in executor executor.c:178$
|     #3 0x104c56ea5 in parse_child_cmd parser.c:86$
|     #4 0x104c55e2e in parser parser.c:151$
|     #5 0x104c52210 in input_loop mminishell.c:149$
|     #6 0x104c52403 in main mminishell.c:165$
|     #7 0x7fff6f3d9cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)$
| $
| ==29812==Register values:$
| rax = 0xbebebebebebebebe  rbx = 0x00007ffeeafb1340  rcx = 0x17d7d7d7d7d7d7d7  rdx = 0x0000100000000000  $
| rdi = 0x0000000104c954fe  rsi = 0x0000000000000006  rbp = 0x00007ffeeafb0f00  rsp = 0x00007ffeeafb0ee0  $
|  r8 = 0x0000000000000400   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x0000000000000246  $
| r12 = 0x0000000000000000  r13 = 0x0000000000000000  r14 = 0x0000000000000000  r15 = 0x0000000000000000  $
| AddressSanitizer can not provide additional info.$
| SUMMARY: AddressSanitizer: SEGV builtins.c:150 in ft_env$
| ==29812==ABORTING$<-
|
---------------------------------------------<

---------------------------------------------> test [42]
|  CMD: ->export TESTVAR="value"
| env | grep TESTVAR<-
|--------------------------------
|  EXPECTED (BASH OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=value$<-
|
|--- STDERR:
| -><-
|
|--- COMPARED STR:
| -><-
|--------------------------------
|--->FOUND (MINISHELL OUTP)  |  exit status: (0)
|
|--- STDOUT:
| ->TESTVAR=value$<-
|
|--- STDERR:
| ->AddressSanitizer:DEADLYSIGNAL$
| =================================================================$
| ==29863==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x000100eda59f bp 0x7ffeeed29f00 sp 0x7ffeeed29ee0 T0)$
| ==29863==The signal is caused by a READ memory access.$
| ==29863==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.$
|     #0 0x100eda59f in ft_env builtins.c:150$
|     #1 0x100ed9c08 in ft_exec_builtin builtins.c:28$
|     #2 0x100edca4b in executor executor.c:178$
|     #3 0x100eddea5 in parse_child_cmd parser.c:86$
|     #4 0x100edce2e in parser parser.c:151$
|     #5 0x100ed9210 in input_loop mminishell.c:149$
|     #6 0x100ed9403 in main mminishell.c:165$
|     #7 0x7fff6f3d9cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)$
| $
| ==29863==Register values:$
| rax = 0xbebebebebebebebe  rbx = 0x00007ffeeed2a340  rcx = 0x17d7d7d7d7d7d7d7  rdx = 0x0000100000000000  $
| rdi = 0x0000000100f1c4fe  rsi = 0x0000000000000006  rbp = 0x00007ffeeed29f00  rsp = 0x00007ffeeed29ee0  $
|  r8 = 0x0000000000000400   r9 = 0x0000000000000000  r10 = 0x0000000000000005  r11 = 0x0000000000000246  $
| r12 = 0x0000000000000000  r13 = 0x0000000000000000  r14 = 0x0000000000000000  r15 = 0x0000000000000000  $
| AddressSanitizer can not provide additional info.$
| SUMMARY: AddressSanitizer: SEGV builtins.c:150 in ft_env$
| ==29863==ABORTING$<-
|
---------------------------------------------<
